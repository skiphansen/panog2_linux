From 846af7c95aa355924f8866ba7d8530bbfdcff644 Mon Sep 17 00:00:00 2001
From: Antony Pavlov <antonynpavlov@gmail.com>
Date: Thu, 6 Jun 2019 21:51:56 +0300
Subject: [PATCH 1/3] litex_liteeth: make it work in polling mode

Signed-off-by: Antony Pavlov <antonynpavlov@gmail.com>
---
 drivers/net/ethernet/litex/litex_liteeth.c | 45 +++++++++++++++++-----
 1 file changed, 35 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/litex/litex_liteeth.c b/drivers/net/ethernet/litex/litex_liteeth.c
index ceacae045088..df18f3a5f90d 100644
--- a/drivers/net/ethernet/litex/litex_liteeth.c
+++ b/drivers/net/ethernet/litex/litex_liteeth.c
@@ -48,6 +48,8 @@ struct liteeth {
 	void __iomem *base;
 	void __iomem *mdio_base;
 	struct net_device *netdev;
+	int use_polling;
+	struct timer_list poll_timer;
 	struct device *dev;
 	struct mii_bus *mii_bus;
 
@@ -152,6 +154,14 @@ static irqreturn_t liteeth_interrupt(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
+static void liteeh_timeout(struct timer_list *t)
+{
+	struct liteeth *priv = from_timer(priv, t, poll_timer);
+
+	liteeth_interrupt(0, priv->netdev);
+	mod_timer(&priv->poll_timer, jiffies + msecs_to_jiffies(10));
+}
+
 static int liteeth_open(struct net_device *netdev)
 {
 	struct liteeth *priv = netdev_priv(netdev);
@@ -162,22 +172,31 @@ static int liteeth_open(struct net_device *netdev)
 	priv->cur_speed = SPEED_100;
 	netif_carrier_on(netdev);
 
-	err = request_irq(netdev->irq, liteeth_interrupt, 0, netdev->name, netdev);
-	if (err) {
-		netdev_err(netdev, "failed to request irq %d\n", netdev->irq);
-		goto err_irq;
+	if (!priv->use_polling) {
+		err = request_irq(netdev->irq, liteeth_interrupt, 0, netdev->name, netdev);
+		if (err) {
+			netdev_err(netdev, "failed to request irq %d\n", netdev->irq);
+			goto err_irq;
+		}
 	}
 
 	/* Clear pending events? */
 	outreg8(1, priv->base + LITEETH_WRITER_EV_PENDING);
 	outreg8(1, priv->base + LITEETH_READER_EV_PENDING);
 
-	/* Enable IRQs? */
-	outreg8(1, priv->base + LITEETH_WRITER_EV_ENABLE);
-	outreg8(1, priv->base + LITEETH_READER_EV_ENABLE);
+	if (!priv->use_polling) {
+		/* Enable IRQs? */
+		outreg8(1, priv->base + LITEETH_WRITER_EV_ENABLE);
+		outreg8(1, priv->base + LITEETH_READER_EV_ENABLE);
+	}
 
 	netif_start_queue(netdev);
 
+	if (priv->use_polling) {
+		timer_setup(&priv->poll_timer, liteeh_timeout, 0);
+		mod_timer(&priv->poll_timer, jiffies + msecs_to_jiffies(50));
+	}
+
 	return 0;
 
 err_irq:
@@ -189,10 +208,14 @@ static int liteeth_stop(struct net_device *netdev)
 {
 	struct liteeth *priv = netdev_priv(netdev);
 
+	del_timer_sync(&priv->poll_timer);
+
 	outreg8(0, priv->base + LITEETH_WRITER_EV_ENABLE);
 	outreg8(0, priv->base + LITEETH_READER_EV_ENABLE);
 
-	free_irq(netdev->irq, netdev);
+	if (!priv->use_polling) {
+		free_irq(netdev->irq, netdev);
+	}
 
 	return 0;
 }
@@ -287,10 +310,12 @@ static int liteeth_probe(struct platform_device *pdev)
 	priv->netdev = netdev;
 	priv->dev = &pdev->dev;
 
+	priv->use_polling = 0;
 	irq = platform_get_irq(pdev, 0);
 	if (irq < 0) {
-		dev_err(&pdev->dev, "Failed to get IRQ\n");
-		return irq;
+		dev_err(&pdev->dev, "Failed to get IRQ, using polling\n");
+		priv->use_polling = 1;
+		irq = 0;
 	}
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-- 
2.20.1

